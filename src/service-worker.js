/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import {RangeRequestsPlugin} from 'workbox-range-requests';
import {CacheableResponsePlugin} from 'workbox-cacheable-response';


clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// var version = '2'
// registerRoute(
//   /.*\.m4a/,
//   cacheFirst({
//     cacheName: 'your-cache-name-here',
//     plugins: [
//       new workbox.cacheableResponse.Plugin({statuses: [200]}),
//       new workbox.rangeRequests.Plugin(),
//     ],
//   }),
// );
// registerRoute(
//   ({url, request, event}) => {
//     const {destination} = request;
//     console.log('url', url)
//     console.log('request', request)
//     console.log('event', event)
//     return destination === 'video' || destination === 'audio'
//   },
//   new CacheFirst({
//     cacheName: 'v1-cache-audio',
//     plugins: [
//       new CacheableResponsePlugin({
//         statuses: [200]
//       }),
//       new RangeRequestsPlugin(),
//     ],
//   }),
// );

// var version = 2;
// var staticCacheName = `cache-v${version}`
// self.addEventListener('fetch', function(event) {
//   var url = new URL(event.request.url);
//   if (url.pathname.match(/^\/((assets|images)\/|manifest.json$)/)) {
//     if (event.request.headers.get('range')) {
//       event.respondWith(returnRangeRequest(event.request, staticCacheName));
//     } else {
//       event.respondWith(returnFromCacheOrFetch(event.request, staticCacheName));
//     }
//   }
//   // other strategies
// });

// function returnRangeRequest(request, cacheName) {
//   return caches
//     .open(cacheName)
//     .then(function(cache) {
//       return cache.match(request.url);
//     })
//     .then(function(res) {
//       if (!res) {
//         return fetch(request)
//           .then(res => {
//             const clonedRes = res.clone();
//             return caches
//               .open(cacheName)
//               .then(cache => cache.put(request, clonedRes))
//               .then(() => res);
//           })
//           .then(res => {
//             return res.arrayBuffer();
//           });
//       }
//       return res.arrayBuffer();
//     })
//     .then(function(arrayBuffer) {
//       const bytes = /^bytes\=(\d+)\-(\d+)?$/g.exec(
//         request.headers.get('range')
//       );
//       if (bytes) {
//         const start = Number(bytes[1]);
//         const end = Number(bytes[2]) || arrayBuffer.byteLength - 1;
//         return new Response(arrayBuffer.slice(start, end + 1), {
//           status: 206,
//           statusText: 'Partial Content',
//           headers: [
//             ['Content-Range', `bytes ${start}-${end}/${arrayBuffer.byteLength}`]
//           ]
//         });
//       } else {
//         return new Response(null, {
//           status: 416,
//           statusText: 'Range Not Satisfiable',
//           headers: [['Content-Range', `*/${arrayBuffer.byteLength}`]]
//         });
//       }
//     });
// }